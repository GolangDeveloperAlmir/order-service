openapi: 3.0.3
info:
  title: Order Service
  version: 1.1.0
servers:
  - url: http://localhost:8080
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        error: { type: string }
    OrderItem:
      type: object
      required: [sku, quantity, price_minor]
      properties:
        sku: { type: string }
        quantity: { type: integer, minimum: 1 }
        price_minor: { type: integer, minimum: 0 }
    CreateOrder:
      type: object
      required: [customer_id, currency, items]
      properties:
        customer_id: { type: string, format: uuid }
        currency: { type: string }
        items:
          type: array
          items: { $ref: "#/components/schemas/OrderItem" }
paths:
  /healthz:
    get:
      summary: Liveness
      responses:
        "200": { description: OK }
  /readyz:
    get:
      summary: Readiness
      responses:
        "200": { description: OK }
        "503": { description: Not Ready }
  /metrics:
    get:
      summary: Prometheus metrics
      responses:
        "200": { description: OK }
  /api/v1/orders:
    get:
      summary: List orders
      parameters:
        - in: query
          name: cursor
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 20, maximum: 100 }
      responses:
        "200": { description: OK }
    post:
      summary: Create order (idempotent)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
          required: false
          description: Reuse to safely retry create.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateOrder" }
      responses:
        "201": { description: Created }
        "401": { description: Unauthorized }
        "409": { description: Conflict (idempotency) }
  /api/v1/orders/{id}:
    get:
      summary: Get order
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    patch:
      summary: Update status
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status: { type: string, enum: [paid, cancelled, shipped] }
      responses:
        "200": { description: Updated }
        "401": { description: Unauthorized }
